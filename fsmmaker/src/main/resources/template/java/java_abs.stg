class(name,type,start, members,interfaces,functions) ::= <<

package com.alan2lin.runtime;

import BaseFsm;
import DefaultExceptionEvent;
import EnumInterface;
import Event;
import ExceptionEvent;
import java.util.concurrent.ConcurrentLinkedQueue;

import FsmFramework;
import DefaultOutputEvent;

import java.util.UUID;
import java.util.HashMap;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public abstract class <name> extends BaseFsm {

   //状态机的名字
   String fsmName = "<name>";

   // 状态机实例 uuid
   String fsmInstanceId = "<name>".trim()+"_"+UUID.randomUUID().toString();

   //状态机类型
   String fsmType = "<type>";

   //当前状态
   private States __current = States.<start>;



    //状态和事件的枚举变量
   <members ; separator="\n">

     @Override
     public String getInstanceId() {
         return fsmInstanceId;
     }

   protected  States __currentState;

   //输入列表,状态机的输入，体现为事件。
   //输出列表,是状态机的一个响应输出，如果是moore状态机 则和 当前状态有关。 如果是mealy 状态机 则和当前输入和当前状态有关。 在这里实现为， moore 是事件触发，状态迁移完成时触发。 mealy 状态机 则是在事件触发后， 状态为迁移前触发。
   //每一个状态机还维护一个最后的输出状态，该状态包含了时间,输入，和迁移前状态。
   //迁移函数，直接体现在事件响应中。
   //状态迁移过程:
   //   1. 判断输入是否是当前状态允许接受的输入。 如果不是，则触发 未预期警告
   //   2. 迁移前状态检查。
   //   3. 迁移时动作响应内容，不成功则执行回滚函数。
   //   4. 迁移前状态检查。
   //   5. 发射输出

   // 关于错误处理, 对于未受控的行为将都会发布到 异常队列里面， 由应用具体去判断，
   //  包括
   //   1. 当前状态下的非法输入序列。
   //   2. 状态迁移前检查异常，无法迁移
   //   3. 状态迁移中动作异常，无法迁移 TODO
   //   4. 状态迁移后检查异常，已经迁移
   //   5. 其他异常

   <interfaces; separator="\n">


       /**
         * 激发某一个事件
         *
         * @param eventName
         * @return
         */
        @Override
        public void fireEvent(String eventName) {
           //利用反射 从事件类型名称 调用相关的响应函数
          EVENT event =   EnumInterface.getFromTypeName(eventName,EVENT.class);
          __processEvent(event);
        }

    // 检查函数指针
    @FunctionalInterface
    interface CheckFunctionPointer{
        public boolean check(EVENT event);
    }

    // 执行函数指针
    @FunctionalInterface
    interface ExecFunctionPointer{
        public boolean exec(EVENT event);
    }




    void standProcedure(CheckFunctionPointer prefixCheck, CheckFunctionPointer postfixCheck,ExecFunctionPointer onTransition,EVENT event,States target){

        log.debug("fsm[{}] 事件[{}]响应中....",getInstanceId(),event.name);
        FsmFramework fsmFramework = DefaultFsmFramework.getInstance();
        //检查迁移前状态
        if(!prefixCheck.check(event)){
            log.debug("无法通过检查，迁移中止，触发一个警告"); //
            fsmFramework.exception(new DefaultExceptionEvent(this, ExceptionEvent.EXCETPION_TYPE.PREFIX_CHECK_FAILED,null));
            return ;
        }

        //如果是mealy 则进行输出

        if(fsmType.equals("MEALY")){
            log.debug("fsm[{}] 事件[{}] 进行输出....",getInstanceId(),event.name);

            fsmFramework.output(new DefaultOutputEvent(this,outputTable.get(event.getName())));
        }

        //状态迁移
        transition(target);
        onTransition.exec(event);
        //触发相应动作,TODO:未来考虑 事务完整型，如果迁移失败，应当可以回滚

        //如果是moore ，则进行输出
        if(fsmType.equals("MOORE")){
            fsmFramework.output(new DefaultOutputEvent(this,outputTable.get(__currentState.name())));
        }



        if(!postfixCheck.check(event)){
            log.debug("迁移后无法通过检查，已经无法终止，将触发一个警告"); //
            fsmFramework.exception(new DefaultExceptionEvent(this, ExceptionEvent.EXCETPION_TYPE.POSTFIX_CHECK_FAILED,null));
        }
    }



   //主要实现的函数
   <functions; separator="\n">

       public boolean transition(States target){
            __currentState = target;
            return true;
       }

}
>>


state_constants(typename, names) ::= <<
public enum <typename> {
    <names; separator=",\n">
    } ;
>>

event_constants(typename, events) ::= <<
    public enum <typename> implements EnumInterface\<<typename> > {
      <events:{v |  <v.state_name>__<v.event_name>("<v.state_name>__<v.event_name>","<v.event_name>") };separator=",\n">;
       String name;
       String value;

       private <typename>(String name,String value){
            this.name = name;
              this.value = value;
       }
       @Override
       public String getName() {
          return this.name;
       }
       @Override
       public String getValue(){
          return this.value;
       }
    }
>>


enter_actions(state_name,event_name) ::=<<

  public boolean checkBefore<state_name>__<event_name>(EVENT event){
     return true;
  }

  public boolean on<state_name>__<event_name>(EVENT event){
      return true;
  }

      public boolean checkAfter<state_name>__<event_name>(EVENT event){
      return true;
  }

   public void enter<state_name>__<event_name>(EVENT event,States target){
        CheckFunctionPointer prefixCheck = this::checkBefore<state_name>__<event_name>;
        CheckFunctionPointer postfixCheck = this::checkAfter<state_name>__<event_name>;
        ExecFunctionPointer  onTransition = this::on<state_name>__<event_name>;

        standProcedure(prefixCheck,postfixCheck,onTransition,event, target);
   }
>>

output_table(outputs) ::= <<

     public HashMap\< String,String >  outputTable = new HashMap\<>(){
         {
           <outputs:{v|put("<v.value0>","<v.value1;format="trimQuotes">");};separator="\n">
         \}
     \};
>>

process_event(transition_table) ::= <<
     void __processEvent( EVENT event ){
         switch(__currentState) {
<transition_table:{v|
            case <v.value0>:
<v.value1:{p|
              if (event == EVENT.<v.value0>__<p.value0>){
                  enter<v.value0; format="capitalize">__<p.value0>(event,States.<p.value1>);
              \}
              }>
              break;
              }>
             default:
                 fsmFramework.exception(new DefaultExceptionEvent(this, ExceptionEvent.EXCETPION_TYPE.TRANSITION_NOT_DEFINED,null));
                 break;
         }
     }
>>


