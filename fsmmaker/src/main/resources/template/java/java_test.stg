class(name, pathtests) ::= <<

package makefsm;


import com.github.alan2lin.runtime.<name>;
import com.github.alan2lin.runtime.<name>Impl;
import DefaultInputEvent;
import com.github.alan2lin.runtime.intf.*;
import lombok.extern.slf4j.Slf4j;

import org.junit.jupiter.api.*;

import java.util.concurrent.CountDownLatch;


@Slf4j
public class <name>Test  {

  static FsmFramework fsmfw = null;
  static Thread fortest;

  static CountDownLatch cdl = new CountDownLatch(1);

  @BeforeAll
  public static void init(){

      fortest = new Thread( ()->{
          try {
              log.info("latch[{}] start to waiting",cdl.toString());
              cdl.await();
          } catch (InterruptedException e) {
              e.printStackTrace();
          }
      });
      fortest.start();;

    fsmfw =  DefaultFsmFramework.getInstance();

  }

  @AfterAll
  public static void destory(){
      log.info("latch[{}] count down",cdl.toString());
      while (!fsmfw.canDestory()){
          try {
              Thread.sleep(200);
          } catch (InterruptedException e) {
              e.printStackTrace();
          }
          log.info("framework cannot be shut down ,try again after [{}]ms",200);
      }
      log.info("framework shutting down now");
      cdl.countDown();
  }


  <pathtests;separator="\n">

  }
>>



pathtest(order,name,emit_events,path) ::= <<

  @Test
  public void testPath<order>() {
     log.info("\n  testPath<order> start.......");
     log.info("<path> \n");

     Fsm fsm = new <name>Impl();
     fsmfw.register(fsm);

     <emit_events:{v|
      DefaultInputEvent event<i0> = new DefaultInputEvent(fsm, <name>.EVENT.<v.value0>__<v.value1>.getName());
      fsmfw.emit(event<i0>);
     } ;separator="\n">

     fsmfw.unregister(fsm);
     log.info("\n  testPath<order> end.......");
  }

>>















